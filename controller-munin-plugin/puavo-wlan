#!/usr/bin/env python

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.

# Multigraph plugin for showing Puavo WLAN elements totals and per AP.

#%# family=auto contrib
#%# capabilities=autoconf

from __future__ import print_function

# Standard library modules
import errno
import os
import sys

# Third-party modules
import json
import redis

def _get_multigraph_key(hostname):
    # Munin uses dash ('-') for separating components in its
    # .rrd files, so we need to replace all dashes to not
    # break anything.
    return hostname.replace("-", "_")

def _refresh_cached_hostnames(new_hostnames):
    old_cached_hostnames = set()

    try:
        with open(os.environ['MUNIN_STATEFILE']) as state_file:
            for line in state_file:
                old_cached_hostnames.add(line.strip())
    except IOError, e:
        if e.errno != errno.ENOENT:
            raise

    new_cached_hostnames = old_cached_hostnames | new_hostnames

    if old_cached_hostnames != new_cached_hostnames:
        with open(os.environ['MUNIN_STATEFILE'], "w") as state_file:
            for hostname in new_cached_hostnames:
                state_file.write("%s\n" % hostname)

    return new_cached_hostnames


def _main():
    redisconn             = redis.Redis()
    keys                  = redisconn.keys("puavo-wlancontroller:status:*")
    statuses              = [json.loads(redisconn.get(key)) for key in keys]
    available_hostnames   = set([s["hostname"] for s in statuses])
    cached_hostnames      = _refresh_cached_hostnames(available_hostnames)
    unavailable_hostnames = cached_hostnames - available_hostnames

    if len(sys.argv) == 1:
        total_rxbytes = 0
        total_txbytes = 0

        total_ap_count    = 0
        total_radio_count = 0
        total_sta_count   = 0

        output_lines  = []

        for status in statuses:
            hostname       = status["hostname"]
            radios         = status["radios"]

            total_radio_count += len(radios)

            host_ap_count    = 0
            host_sta_count   = 0

            host_rxbytes   = 0
            host_txbytes   = 0

            for radio in radios:
                accesspoints = radio["accesspoints"]

                host_ap_count  += len(accesspoints)
                total_ap_count += len(accesspoints)

                for accesspoint in radio["accesspoints"]:
                    host_sta_count  += len(accesspoint["stations"])
                    total_sta_count += len(accesspoint["stations"])

                    ap_rxbytes = accesspoint["rx_bytes"]
                    ap_txbytes = accesspoint["tx_bytes"]

                    host_rxbytes  += ap_rxbytes
                    host_txbytes  += ap_txbytes
                    total_rxbytes += ap_rxbytes
                    total_txbytes += ap_txbytes

            multigraph_key = _get_multigraph_key(hostname)

            output_lines.append("multigraph puavo_wlan_traffic.{}".format(multigraph_key))
            output_lines.append("rx.value {}".format(host_rxbytes * 8))
            output_lines.append("tx.value {}".format(host_txbytes * 8))

            output_lines.append("multigraph puavo_wlan_elements.{}".format(multigraph_key))
            output_lines.append("accesspoints.value {}".format(host_ap_count))
            output_lines.append("radios.value {}".format(len(radios)))
            output_lines.append("stations.value {}".format(host_sta_count))

        output_lines.insert(0, "multigraph puavo_wlan_traffic")
        output_lines.insert(1, "rx.value {}".format(total_rxbytes * 8))
        output_lines.insert(2, "tx.value {}".format(total_txbytes * 8))

        output_lines.insert(0, "multigraph puavo_wlan_elements")
        output_lines.insert(1, "accesspoints.value {}".format(total_ap_count))
        output_lines.insert(2, "radios.value {}".format(total_radio_count))
        output_lines.insert(3, "stations.value {}".format(total_sta_count))

        for hostname in unavailable_hostnames:
            multigraph_key = _get_multigraph_key(hostname)
            output_lines.append("multigraph puavo_wlan_elements.{}".format(multigraph_key))
            output_lines.append("accesspoints.value U")
            output_lines.append("radios.value U")
            output_lines.append("stations.value U")

            output_lines.append("multigraph puavo_wlan_elements.{}".format(multigraph_key))
            output_lines.append("accesspoints.value U")
            output_lines.append("radios.value U")
            output_lines.append("stations.value U")

        for output_line in output_lines:
            print(output_line)

        return 0

    if len(sys.argv) == 2:
        if sys.argv[1] == 'autoconf':
            print("yes")
            return 0

        elif sys.argv[1] == 'config':
            print("multigraph puavo_wlan_elements")

            print("graph_title Puavo WLAN elements")
            print("graph_args --base 1000 -l 0")
            print("graph_vlabel Count")
            print("graph_category network")
            print("graph_info This graph shows the number of Puavo WLAN elements.")

            print("accesspoints.label accesspoints")
            print("accesspoints.min 0")
            print("accesspoints.draw LINE2")
            print("accesspoints.info The number of accesspoints.")

            print("radios.label radios")
            print("radios.min 0")
            print("radios.draw LINE2")
            print("radios.info The number of radios.")

            print("stations.label stations")
            print("stations.min 0")
            print("stations.draw LINE2")
            print("stations.info The number of stations.")

            print("multigraph puavo_wlan_traffic")

            print("graph_title Puavo WLAN traffic")
            print("graph_order rx tx")
            print("graph_args --base 1000")
            print("graph_vlabel bits in (-) / out (+) per ${graph_period}")
            print("graph_category network")
            print("graph_info This graph shows the total Puavo WLAN traffic.")

            print("tx.info Bits sent/received")
            print("rx.label rx")
            print("rx.type DERIVE")
            print("rx.graph no")
            print("rx.min 0")
            print("tx.label bps")
            print("tx.type DERIVE")
            print("tx.negative rx")
            print("tx.min 0")

            for hostname in sorted(cached_hostnames):
                multigraph_key = _get_multigraph_key(hostname)

                print("multigraph puavo_wlan_elements.{}".format(multigraph_key))

                print("graph_title Puavo WLAN elements on host {}".format(hostname))
                print("graph_args --base 1000 -l 0")
                print("graph_vlabel Count")
                print("graph_category network")
                print("graph_info This graph shows the number of Puavo WLAN elements on host {}.".format(hostname))

                print("accesspoints.label accesspoints")
                print("accesspoints.min 0")
                print("accesspoints.draw LINE2")
                print("accesspoints.info The number of accesspoints running on {}.".format(hostname))

                print("radios.label radios")
                print("radios.min 0")
                print("radios.draw LINE2")
                print("radios.info The number of radios on host {}.".format(hostname))

                print("stations.label stations")
                print("stations.min 0")
                print("stations.draw LINE2")
                print("stations.info The number of stations connected to {}.".format(hostname))

                print("multigraph puavo_wlan_traffic.{}".format(multigraph_key))

                print("graph_title Puavo WLAN traffic of {}".format(hostname))
                print("graph_order rx tx")
                print("graph_args --base 1000")
                print("graph_vlabel bits in (-) / out (+) per ${graph_period}")
                print("graph_category network")
                print("graph_info This graph shows the Puavo WLAN traffic of {}.".format(hostname))

                print("tx.info Bits sent/received")
                print("rx.label rx")
                print("rx.type DERIVE")
                print("rx.graph no")
                print("rx.min 0")
                print("tx.label bps")
                print("tx.type DERIVE")
                print("tx.negative rx")
                print("tx.min 0")

            return 0

    return 1

if __name__ == "__main__":
    sys.exit(_main())
