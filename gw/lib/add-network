#!/bin/bash

set -eu

on_exit()
{
    local exitval=$?

    set +eu
    trap '' EXIT HUP INT QUIT ABRT ALRM TERM USR1 USR2

    [ -z "${tmpfile}" ] || rm -f "${tmpfile}"

    exit $exitval
}

if [ $# -ne 2 ]; then
    echo "$(basename $0): wrong number of arguments" >&2
    echo "Usage: $(basename $0) PWGW_RUNDIR BRIDGE" >&2
    exit 1
fi

rundir=$1
bridge=$2

read network

libdir=$(dirname "$0")
libdir=$(readlink -e "${libdir}")

tmpfile=""

trap on_exit EXIT HUP INT QUIT ABRT ALRM TERM USR1 USR2

tmpfile=$(mktemp)

## We aquire exclusive lock on the vtund configuration file, because
## multiple instances of this script can be running simultaneously.
## TODO: Make sure the lock file is not written over NFS! flock(2) does
## not work over NFS!
exec {lockfd}<"${rundir}/vtund.conf"
flock "${lockfd}"

## Quit if the network is already there.
sed -nr "/^${network} \{/q1" "${rundir}/vtund.conf" || exit

cp -a "${rundir}/vtund.conf" "${tmpfile}"

cat <<EOF >>"${tmpfile}"

${network} {
    passwd    wlan;
    type      ether;
    proto     udp;
    speed     0;
    encrypt   no;
    compress  no;
    multi     yes;
    keepalive 10:3;

    up {
        program "${libdir}/vtun-up %% ${bridge}";
    };

    down {
        program "${libdir}/vtun-down %% ${bridge}";
    };
}
EOF

mv "${tmpfile}" "${rundir}/vtund.conf"

vtundpid=$(cat "${rundir}/vtund.pid")
kill -HUP "${vtundpid}"
