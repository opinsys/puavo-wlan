#!/bin/bash

set -eubm

on_exit()
{
    local -r exitval=$?

    ## Do not exit or terminate on error or signal anymore. We are
    ## already exiting and it would be shame to exit while exiting, yo
    ## dawg.
    set +eu
    trap '' EXIT HUP INT QUIT ABRT ALRM TERM USR1 USR2

    ## Kill our child processes. There is no reason to let Init adopt
    ## them when we die.
    pkill -TERM -P $$

    ## Read cached events.
    while read tap bridge; do
        disable_dns_redirection "${bridge}" "${PWAP_DNSPROXY_PORT}" && {
            echo "disabled DNS redirection for '${bridge}' to port ${PWAP_DNSPROXY_PORT}" >&2
        }
    done <"${PWAP_RUNDIR}/networks"

    rm -rf "${PWAP_DNSPROXY_RUNDIR}"

    exit $exitval
}

disable_dns_redirection()
{
    iptables -t nat -D PREROUTING -p udp --dport 53 -i "$1" -j REDIRECT \
        --to-port "$2" -m comment --comment "puavo-wlanap-dnsproxy"
}

enable_dns_redirection()
{
    iptables -t nat -C PREROUTING -p udp --dport 53 -i "$1" -j REDIRECT \
        --to-port "$2" -m comment --comment "puavo-wlanap-dnsproxy" \
        && return 0

    iptables -t nat -A PREROUTING -p udp --dport 53 -i "$1" -j REDIRECT \
        --to-port "$2"  -m comment --comment "puavo-wlanap-dnsproxy"
}

parse_args()
{
    PWAP_DNSPROXY_ARGS_DAEMON=0

    if [ $# -eq 1 ]; then
        if [ "$1" = "--daemon" ]; then
            PWAP_DNSPROXY_ARGS_DAEMON=1
            return 0
        fi
        echo "unexpected argument '$1'" >&2
        echo "Usage: $(basename $0) [--daemon]" >&2
        return 1
    elif [ $# -gt 2 ]; then
        echo "too many arguments" >&2
        echo "Usage: $(basename $0) [--daemon]" >&2
        return 1
    fi
}

source puavo-wlanap-env
source puavo-wlanap-dnsproxy-env
source "${PWAP_DNSPROXY_DATADIR}/config"
source "${PWAP_DNSPROXY_CONFDIR}/config" || true # User has deleted his config file, cool.

parse_args "$@"

if [ ${PWAP_DNSPROXY_ARGS_DAEMON} -ne 0 ]; then
    daemon --noconfig --stderr='daemon.info' --name='puavo-wlanap-dnsproxy' -- puavo-wlanap-dnsproxy
    exit 0
fi

## After this point the process is getting hot and starts taking actions
## which might have persistent side-effects (files, directories,
## bridges, other processes, etc.). The trap is set to ensure that
## everything gets cleaned up properly afterwards.
trap on_exit EXIT

mkdir -p "${PWAP_DNSPROXY_RUNDIR}"

dnsmasq_ptr_record_args=""
puavo_domain=$(cat /etc/puavo/domain)
puavo_hostname=$(cat /etc/puavo/hostname)
puavo_api_server=$(puavo-resolve-api-server)
url="${puavo_api_server}/v3/devices/${puavo_hostname}/wireless_printer_queues"
json=$(wget -O - -q --ca-certificate /etc/puavo/certs/rootca.pem --header 'Authorization: Bootserver' "${url}")
printer_names=$(echo "${json}" | jq -r '.[].name')
if [ "${printer_names}" == "null" ]; then
    echo "wireless printers not found, exiting" >&2
    exit 0
fi

for printer_name in ${printer_names}; do
    dnsmasq_ptr_record_args="${dnsmasq_ptr_record_args} --ptr-record=_universal._sub._ipp._tcp.${puavo_domain},${printer_name}._ipp._tcp.${puavo_domain}"
done

dnsmasq \
    --port="${PWAP_DNSPROXY_PORT}" \
    --keep-in-foreground \
    --user=nobody \
    --pid-file="${PWAP_DNSPROXY_RUNDIR}/dnsmasq.pid" \
    ${dnsmasq_ptr_record_args} &

nc -k -l -U "${PWAP_DNSPROXY_RUNDIR}/control.socket" | while read event tap bridge; do
    case "$event" in
        vtun-up)
            enable_dns_redirection "${bridge}" "${PWAP_DNSPROXY_PORT}"
            echo "enabled DNS redirection for '${bridge}' to port ${PWAP_DNSPROXY_PORT}" >&2
            ;;
        vtun-down)
            disable_dns_redirection "${bridge}" "${PWAP_DNSPROXY_PORT}"
            echo "disabled DNS redirection for '${bridge}' to port ${PWAP_DNSPROXY_PORT}" >&2
            ;;
        *)
            echo "received unknown event '${event} ${bridge}'" >&2
            ;;
    esac
done &

## Read cached events.
while read tap bridge; do
    enable_dns_redirection "${bridge}" "${PWAP_DNSPROXY_PORT}"
    echo "enabled DNS redirection for '${bridge}' to port ${PWAP_DNSPROXY_PORT}" >&2
done <"${PWAP_RUNDIR}/networks"

wait
