#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2015 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import division
from __future__ import print_function

import collections
import datetime
import math
import os
import os.path
import sys
import tempfile

from PyQt4.QtCore import *
from PyQt4.QtGui import *

import matplotlib.pyplot
import scipy.interpolate
import numpy

LEVELS = range(-95, -20, 5)

def saveTemporaryHeatmap(img_w, img_h, xs, ys, zs):
    ## Interpolate z-values throughout the 2D-space using linear radial
    ## basis function.
    rbf = scipy.interpolate.Rbf(xs, ys, zs, function='linear')
    spc_w = img_w / 10
    spc_h = img_h / 10
    spc_xs, spc_ys = [v.flatten() for v in numpy.meshgrid(numpy.linspace(0, img_w - 1, spc_w),
                                                          numpy.linspace(0, img_h - 1, spc_h))]
    array2d = rbf(spc_xs, spc_ys).reshape((spc_h, spc_w))

    tmpfile = QTemporaryFile()
    if not tmpfile.open():
        return None

    matplotlib.pyplot.imsave(str(tmpfile.fileName()), array2d, format='png',
                             vmin=min(LEVELS), vmax=max(LEVELS), cmap='RdYlBu_r')

    return tmpfile

class View(QGraphicsView):

    ZOOM_FACTOR = 1.1

    def __init__(self, *args):
        QGraphicsView.__init__(self, *args)

    def wheelEvent(self, event):
        if not event.modifiers() & Qt.ControlModifier:
            QGraphicsView.wheelEvent(self, event)
        else:
            self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)

            if event.delta() > 0:
                self.scale(View.ZOOM_FACTOR, View.ZOOM_FACTOR)
            else:
                self.scale(1 / View.ZOOM_FACTOR, 1 / View.ZOOM_FACTOR)

            event.accept()

class Scene(QGraphicsScene):

    def __init__(self, monitor, *args):
        QGraphicsScene.__init__(self, *args)

        self.__monitor = monitor
        self.__monitor.stopped.connect(self.__stopAnimation)
        self.__monitor.started.connect(self.__startAnimation)
        self.__monitor.beaconsReceived.connect(self.__readBeacons)
        self.__currentSpot = None
        self.__currentSpotMeasurements = {}

        self.__spots = []

        self.__layoutPixmapItem = None

        self.__setupAnimation()

    def setLayoutPixmap(self, pixmap):
        if self.__layoutPixmapItem is not None:
            self.removeItem(self.__layoutPixmapItem)
        self.__layoutPixmapItem = self.addPixmap(pixmap)
        self.__layoutPixmapItem.setZValue(-1)

    def __readBeacons(self):
        for beacon in self.__monitor.readBeacons():
            rssi = self.__currentSpotMeasurements.get(beacon.bssid, beacon.rssi)
            self.__currentSpotMeasurements[beacon.bssid] = (beacon.rssi + rssi) / 2

    def mousePressEvent(self, event):
        QGraphicsScene.mousePressEvent(self, event)
        if not event.isAccepted() and event.button() == Qt.LeftButton and not event.modifiers():
            item = Spot()
            item.setPos(event.scenePos())
            self.addItem(item)
            self.__spots.append(item)
            event.accept()

    def removeSpot(self, spot):
        self.__spots.remove(spot)
        if spot == self.__currentSpot:
            self.toggleSpot(spot)
        self.removeItem(spot)

    def __startAnimation(self):
        self.__animation.setItem(self.__currentSpot)
        self.__animation.timeLine().start()

    def __stopAnimation(self):
        if self.__animation.timeLine().state() == QTimeLine.Running:
            self.__animation.timeLine().stop()
            self.__animation.setStep(0)

    def toggleSpot(self, spot):
        self.__monitor.stop()

        if self.__currentSpot == spot:
            self.__currentSpot = None
            self.__currentSpotMeasurements = {}
            return

        self.__currentSpot = spot
        self.__currentSpotMeasurements = {}

        self.__monitor.start()

    def clear(self):
        QGraphicsScene.clear(self)
        self.__setupAnimation()

    def __setupAnimation(self):
        timeLine = QTimeLine(2000)
        timeLine.setLoopCount(5)
        timeLine.finished.connect(self.__measurementFinished)
        self.__animation = QGraphicsItemAnimation()
        self.__animation.setTimeLine(timeLine)
        self.__animation.setScaleAt(0.0, 1, 1)
        self.__animation.setScaleAt(0.5, 2, 2)
        self.__animation.setScaleAt(1.0, 1, 1)
        self.__animation.setRotationAt(0.0, 0)
        self.__animation.setRotationAt(0.5, 180)
        self.__animation.setRotationAt(1.0, 360)

    def __measurementFinished(self):
        self.__currentSpot.setBrush(QBrush(QColor("#66ff66")))
        self.__currentSpot.measurement = self.__currentSpotMeasurements

        measurements = self.measurements()

        xs = measurements.pop('x')
        ys = measurements.pop('y')
        zs = [max(v) for v in zip(*measurements.values())]

        ## To RBF-interpolate, we need more than 1 measurement point.
        if len(xs) > 1:
            w = self.__layoutPixmapItem.pixmap().width()
            h = self.__layoutPixmapItem.pixmap().height()
            temporaryImageFile = saveTemporaryHeatmap(w, h, xs, ys, zs)
            self.addPixmap(QPixmap(temporaryImageFile.fileName()).scaled(w, h)).setZValue(-2)

        self.toggleSpot(self.__currentSpot)

    def measurements(self):
        result = collections.OrderedDict()

        xs = result['x'] = []
        ys = result['y'] = []

        bssids = set()

        for spot in self.__spots:

            xs.append(int(spot.pos().x()))
            ys.append(int(spot.pos().y()))

            for bssid in spot.measurement.keys():
                bssids.add(bssid)

        for spot in self.__spots:
            for bssid in bssids:
                values = result.setdefault(bssid, [])
                values.append(int(round(spot.measurement.get(bssid, min(LEVELS)))))

        return result

class Spot(QGraphicsPolygonItem):

    SIZE = 30

    def __init__(self):
        QGraphicsPolygonItem.__init__(self)

        points = []
        for i in range(5):
            point = QPointF(0.5 + 0.5 * math.cos(4 / 5 * math.pi * i),
                            0.5 + 0.5 * math.sin(4 / 5 * math.pi * i))
            points.append(point * Spot.SIZE)

        self.setPolygon(QPolygonF(points).translated(-Spot.SIZE / 2,
                                                     -Spot.SIZE / 2))
        self.setFillRule(Qt.WindingFill)

        dropShadowEffect = QGraphicsDropShadowEffect()
        dropShadowEffect.setOffset(2)
        self.setGraphicsEffect(dropShadowEffect)
        self.setFlag(QGraphicsItem.ItemIsMovable)
        self.setBrush(QBrush(QColor("beige")))

        self.setAcceptHoverEvents(True)

        self.measurement = {}

        self.__removeAction = QAction("&Remove", None)
        self.__removeAction.triggered.connect(self.__remove)

        self.__toggleAction = QAction("&Toggle measurement", None)
        self.__toggleAction.triggered.connect(self.__toggle)

        self.__contextMenu = QMenu()
        self.__contextMenu.addAction(self.__removeAction)
        self.__contextMenu.addAction(self.__toggleAction)

    def __toggle(self):
        self.scene().toggleSpot(self)

    def __remove(self):
        self.scene().removeSpot(self)

    def hoverEnterEvent(self, event):
        self.setCursor(QCursor(Qt.PointingHandCursor))

    def mouseDoubleClickEvent(self, event):
        self.__toggle()
        event.accept()

    def contextMenuEvent(self, event):
        self.__contextMenu.exec_(event.screenPos())

def get_dot11_interfaces():
    result = []
    for iface in os.listdir('/sys/class/net'):
        if os.path.exists(os.path.join('/sys/class/net/', iface, 'phy80211')):
            result.append(iface)
    return result

Beacon = collections.namedtuple('Beacon', ['rssi', 'bssid'])

class Monitor(QObject):

    started = pyqtSignal()
    stopped = pyqtSignal()
    beaconsReceived = pyqtSignal()

    def __init__(self, interface, channel, *args):
        QObject.__init__(self, *args)

        self.__iface = interface
        self.__chan = channel

        self.__tshark = None

    def interface(self):
        return self.__iface

    def setInterface(self, interface):
        self.__iface = interface

    def channel(self):
        return self.__chan

    def setChannel(self, channel):
        self.__chan = channel

    def start(self):
        if self.__tshark is not None:
            return False

        if QProcess.execute('/sbin/ifconfig', [self.__iface, 'down']) != 0:
            return False

        if QProcess.execute('/sbin/iwconfig', [self.__iface, 'mode', 'monitor']) != 0:
            return False

        if QProcess.execute('/sbin/ifconfig', [self.__iface, 'up']) != 0:
            return False

        if QProcess.execute('/sbin/iwconfig', [self.__iface, 'channel', '{}'.format(self.__chan)]) != 0:
            return False

        self.__tshark = QProcess(self)
        self.__tshark.readyReadStandardOutput.connect(self.beaconsReceived)
        self.__tshark.started.connect(self.started)
        self.__tshark.finished.connect(self.stopped)
        tshark_args = ['-i', self.__iface,
                       '-l', # Line-buffered mode, otherwise tshark
                             # outputs frames in big lumps.
                       '-f', 'wlan[0] == 0x80',
                       '-T', 'fields',
                       '-E', 'separator=|',
                       '-e', 'radiotap.dbm_antsignal',
                       '-e', 'wlan.ta']
        self.__tshark.start('/usr/bin/tshark', tshark_args, QIODevice.ReadOnly)
        return True

    def stop(self):
        if self.__tshark:
            self.__tshark.close()
            self.__tshark = None

    def readBeacons(self):
        result = []

        while self.__tshark.canReadLine():
            line = str(self.__tshark.readLine())
            rssi, bssid = line.strip().split('|')

            result.append(Beacon(rssi=int(rssi), bssid=bssid))

        return result

class MonitorWidget(QWidget):

    def __init__(self, monitor, *args):
        QWidget.__init__(self, *args)

        self.__monitor = monitor
        self.__monitor.started.connect(self.__disable)
        self.__monitor.stopped.connect(self.__enable)

        layout = QFormLayout()

        self.__ifaceComboBox = QComboBox()
        self.__ifaceComboBox.addItems(sorted(INTERFACES))
        self.__ifaceComboBox.activated.connect(self.__saveInterface)
        layout.addRow(QLabel("Interface:"), self.__ifaceComboBox)

        self.__chanComboBox = QComboBox()
        self.__chanComboBox.addItems([str(c) for c in range(1, 14)])
        self.__chanComboBox.activated.connect(self.__saveChannel)
        layout.addRow(QLabel("Channel:"), self.__chanComboBox)

        self.setLayout(layout)

    def __disable(self):
        self.setEnabled(False)

    def __enable(self):
        self.setEnabled(True)

    def __saveChannel(self):
        self.__monitor.setChannel(int(self.__chanComboBox.currentText()))

    def __saveInterface(self):
        self.__monitor.setInterface(self.__ifaceComboBox.currentText())

class MainWindow(QMainWindow):

    def __init__(self, monitor, *args):
        QMainWindow.__init__(self, *args)

        self.__monitor = monitor

        self.__view = View(self)
        self.__view.setRenderHints(QPainter.Antialiasing)
        self.__scene = None

        self.setWindowTitle("Puavo WLAN Mapper")
        self.setStatusBar(QStatusBar(self))

        self.setCentralWidget(self.__view)

        self.__setupDockWidgets()
        self.__setupActions()
        self.__setupMenus()

    def closeEvent(self, event):
        self.__monitor.stop()

    def sizeHint(self):
        return QSize(800, 600)

    def __setupActions(self):
        self.__aboutAction = QAction(self)
        self.__aboutAction.setText("&About...")
        self.__aboutAction.triggered.connect(self.__showAboutDialog)

        self.__loadAction = QAction(self)
        self.__loadAction.setText("&Load layout image...")
        self.__loadAction.setShortcut(QKeySequence("Ctrl+O"))
        self.__loadAction.triggered.connect(self.__loadLayoutImageWithDialog)

        self.__exportAction = QAction(self)
        self.__exportAction.setText("&Export measurements...")
        self.__exportAction.triggered.connect(self.__exportMeasurementsWithDialog)

        self.__quitAction = QAction(self)
        self.__quitAction.setText("&Quit")
        self.__quitAction.setShortcut(QKeySequence("Ctrl+Q"))
        self.__quitAction.triggered.connect(self.close)

    def __setupMenus(self):
        menuBar = QMenuBar()

        fileMenu = menuBar.addMenu("&File")
        fileMenu.addAction(self.__loadAction)
        fileMenu.addAction(self.__exportAction)
        fileMenu.addSeparator()
        fileMenu.addAction(self.__quitAction)

        viewMenu = menuBar.addMenu("&View")
        viewMenu.addAction(self.__monitorDockWidget.toggleViewAction())

        helpMenu = menuBar.addMenu("&Help")
        helpMenu.addAction(self.__aboutAction)

        self.setMenuBar(menuBar)

    def __setupDockWidgets(self):
        self.__monitorDockWidget = QDockWidget(self)
        self.__monitorWidget = MonitorWidget(self.__monitor, self)
        self.__monitorDockWidget.setWidget(self.__monitorWidget)
        self.__monitorDockWidget.setWindowTitle("Monitor")
        self.addDockWidget(Qt.LeftDockWidgetArea, self.__monitorDockWidget)

    def __exportMeasurementsWithDialog(self):
        filepath = QFileDialog.getSaveFileName(self,
                                               "Export measurements",
                                               QDir.currentPath(),
                                               "CSV (*.csv)")
        if not filepath:
            return

        self.__exportMeasurements(filepath)

    def __exportMeasurements(self, filepath):
        measurements = self.__scene.measurements()

        with open(filepath, "w") as csvfile:
            header = ",".join(measurements.keys())
            csvfile.write("%s\n" % header)
            for vals in zip(*measurements.values()):
                line = ",".join(['{}'.format(v) for v in vals])
                csvfile.write('{}\n'.format(line))

    def __loadLayoutImageWithDialog(self):
        filepath = QFileDialog.getOpenFileName(self,
                                               "Load layout image",
                                               QDir.currentPath(),
                                               "Images (*.png)")
        if not filepath:
            return

        self.loadLayoutImage(filepath)

    def loadLayoutImage(self, filepath):
        layoutPixmap = QPixmap(filepath, "png")
        if layoutPixmap.isNull():
            msg = "File {} could not be loaded as a layout image.\n\n" \
                  "Please ensure the layout image is a valid PNG file."
            QMessageBox.critical(self, "Failed to load a layout image",
                                 msg.format(filepath))
        else:
            if self.__scene is None:
                self.__scene = Scene(self.__monitor, self)
                self.__view.setScene(self.__scene)

            self.__monitor.stop()
            self.__scene.clear()
            self.__scene.setLayoutPixmap(layoutPixmap)
            self.statusBar().showMessage(
                "Loaded layout image '{}'.".format(filepath), 5000)

    def __showAboutDialog(self):
        aboutText = QString.fromUtf8(
            "<h1>Puavo WLAN Mapper</h1>"
            "<p>Version 0.1.0</p>"
            "<p>Copyright © 2015 <a href=\"http://opinsys.fi\">Opinsys Oy</a></p>"
            "<p>This program is free software: you can redistribute it and/or "
            "modify it under the terms of the GNU General Public License as "
            "published by the Free Software Foundation, either version 2 of the "
            "License, or (at your option) any later version.</p>"
            "<p>This program is distributed in the hope that it will be useful, but"
            " WITHOUT ANY WARRANTY; without even the implied warranty of "
            "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>"
            "<p>See the <a href=\"https://www.gnu.org/licenses/gpl-2.0.html\">GNU "
            "General Public License</a> for more details.</p>")

        QMessageBox.about(self, "About Puavo WLAN Mapper", aboutText)

INTERFACES = get_dot11_interfaces()

def main():
    app = QApplication(sys.argv)

    if app.argc() > 2:
        error_message = "ERROR: invalid number of arguments ({})"
        print(error_message.format(app.argc() - 1), file=sys.stderr)
        print("Usage: {} [LAYOUT_PNG]".format(sys.argv[0]), file=sys.stderr)
        return 1

    if not INTERFACES:
        QMessageBox.critical(None, "Startup failure", "Failed to find any 802.11 devices.")
        sys.exit(1)

    monitor = Monitor(INTERFACES[0], 1)

    win = MainWindow(monitor)
    win.show()

    if app.argc() == 2:
        win.loadLayoutImage(sys.argv[1])

    return app.exec_()

if __name__ == "__main__":
   sys.exit(main())
