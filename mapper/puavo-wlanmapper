#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2015 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import division
from __future__ import print_function

import collections
import os
import os.path
import sys

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class View(QGraphicsView):

    ZOOM_FACTOR = 1.1

    def __init__(self, *args):
        QGraphicsView.__init__(self, *args)

    def wheelEvent(self, event):
        if not event.modifiers() & Qt.ControlModifier:
            QGraphicsView.wheelEvent(self, event)
        else:
            self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)

            if event.delta() > 0:
                self.scale(View.ZOOM_FACTOR, View.ZOOM_FACTOR)
            else:
                self.scale(1 / View.ZOOM_FACTOR, 1 / View.ZOOM_FACTOR)

            event.accept()

class Scene(QGraphicsScene):

    def __init__(self, *args):
        QGraphicsScene.__init__(self, *args)

        self.setupAnimation()

    def getDotId(self):
        if self.freeDotIds:
            return self.freeDotIds.pop()

        self.maxDotId += 1
        return self.maxDotId

    def putDotId(self, dotId):
        if dotId == self.maxDotId:
            self.maxDotId -= 1
        else:
            self.freeDotIds.append(dotId)
            self.freeDotIds = sorted(self.freeDotIds, reverse=True)

    def mousePressEvent(self, event):
        QGraphicsScene.mousePressEvent(self, event)
        if not event.isAccepted() and event.button() == Qt.LeftButton and not event.modifiers():
            dot = Item()
            self.addItem(dot)

            dot.setPos(event.scenePos())
            dot.setFlag(QGraphicsItem.ItemIsMovable)
            QGraphicsTextItem("{}".format(self.getDotId()), dot)
            event.accept()

    def clear(self):
        QGraphicsScene.clear(self)
        self.setupAnimation()

    def setupAnimation(self):
        timer = QTimeLine(2000)
        timer.setLoopCount(0)
        self.animation = QGraphicsItemAnimation()
        self.animation.setTimeLine(timer)
        self.animation.setScaleAt(0.0, 1, 1)
        self.animation.setScaleAt(0.5, 3, 3)
        self.animation.setScaleAt(1.0, 1, 1)
        self.freeDotIds = []
        self.maxDotId = 0

class Item(QGraphicsEllipseItem):

    MEASUREMENT_DOT_SIZE = 20

    def __init__(self):
        QGraphicsEllipseItem.__init__(self,
                                      Item.MEASUREMENT_DOT_SIZE / -2,
                                      Item.MEASUREMENT_DOT_SIZE / -2,
                                      Item.MEASUREMENT_DOT_SIZE,
                                      Item.MEASUREMENT_DOT_SIZE)

        self.setAcceptHoverEvents(True)

    def hoverEnterEvent(self, event):
        self.setCursor(QCursor(Qt.PointingHandCursor))

    def mousePressEvent(self, event):
        if event.button() == Qt.RightButton and not event.modifiers():
            self.scene().putDotId(int(self.childItems()[0].toPlainText()))
            self.scene().removeItem(self)
            event.accept()

    def mouseDoubleClickEvent(self, event):
        if self.scene().animation.timeLine().state() == QTimeLine.Running:
            self.scene().animation.timeLine().stop()
            self.scene().animation.setStep(0)
            if self.scene().animation.item() == self:
                event.accept()
                return

        self.scene().animation.setItem(self)
        self.scene().animation.timeLine().start()

        event.accept()

def get_dot11_interfaces():
    result = []
    for iface in os.listdir('/sys/class/net'):
        if os.path.exists(os.path.join('/sys/class/net/', iface, 'phy80211')):
            result.append(iface)
    return result

Measurement = collections.namedtuple('Measurement', ['rssi', 'bssid', 'freq', 'chan'])

class Monitor(QObject):

    started = pyqtSignal()
    measurementsReady = pyqtSignal()

    def __init__(self, interface, *args):
        QObject.__init__(self, *args)

        self.__iface = interface
        self.__tshark = None

    def restart(self):
        self.stop()
        self.start()

    def setChannel(self, channel):
        args = [self.__iface, 'channel', '{}'.format(channel)]
        return QProcess.execute('/sbin/iwconfig', args) == 0

    def start(self):
        if self.__tshark is not None:
            return False

        QProcess.execute('/sbin/ifconfig', [self.__iface, 'down'])
        QProcess.execute('/sbin/iwconfig', [self.__iface, 'mode', 'monitor'])
        QProcess.execute('/sbin/ifconfig', [self.__iface, 'up'])

        self.__tshark = QProcess(self)
        self.__tshark.readyReadStandardOutput.connect(self.measurementsReady)
        self.__tshark.started.connect(self.started)
        tshark_args = ['-i', self.__iface,
                       '-l', # Line-buffered mode, otherwise tshark
                             # outputs frames in big lumps.
                       '-f', 'wlan[0] == 0x80',
                       '-T', 'fields',
                       '-E', 'separator=|',
                       '-e', 'radiotap.dbm_antsignal',
                       '-e', 'wlan.ta',
                       '-e', 'radiotap.channel.freq',
                       '-e', 'wlan_mgt.ht.info.primarychannel']
        self.__tshark.start('/usr/bin/tshark', tshark_args, QIODevice.ReadOnly)
        return True

    def stop(self):
        if self.__tshark:
            self.__tshark.close()
            self.__tshark = None

    def readMeasurements(self):
        result = []

        while self.__tshark.canReadLine():
            line = str(self.__tshark.readLine())
            dbm, bssid, freq, chan = line.strip().split('|')

            result.append(
                Measurement(
                    rssi=int(dbm),
                    bssid=bssid,
                    freq=int(freq),
                    chan=int(chan)))

        return result

class MonitorWidget(QWidget):

    def __init__(self, *args):
        QWidget.__init__(self, *args)

        self.monitor = None

        layout = QFormLayout()

        self.startStopPushButton = QPushButton("Capture")
        self.startStopPushButton.setCheckable(True)
        self.startStopPushButton.setChecked(False)
        self.startStopPushButton.toggled.connect(self.startStopMonitor)
        layout.addRow(self.startStopPushButton)

        self.interfaceComboBox = QComboBox()
        self.interfaceComboBox.addItems(sorted(get_dot11_interfaces()))
        self.startStopPushButton.setEnabled(self.interfaceComboBox.count() > 0)
        layout.addRow(QLabel("Interface:"), self.interfaceComboBox)

        self.channelComboBox = QComboBox()
        self.channelComboBox.addItems([str(c) for c in range(1, 14)])
        self.channelComboBox.currentIndexChanged.connect(self.channelChanged)
        layout.addRow(QLabel("Channel:"), self.channelComboBox)

        self.setLayout(layout)

    def channelChanged(self):
        self.monitor.setChannel(int(self.channelComboBox.currentText()))

    def updateSeenList(self):
        print(self.monitor.readMeasurements())

    def startStopMonitor(self, toggled):
        self.interfaceComboBox.setEnabled(not toggled)
        if toggled:
            if self.monitor is None:
                self.monitor = Monitor(self.interfaceComboBox.currentText())
                self.monitor.measurementsReady.connect(self.updateSeenList)

            self.monitor.start()
        else:
            self.monitor.stop()

class MainWindow(QMainWindow):

    def __init__(self, *args):
        QMainWindow.__init__(self, *args)

        self.view = View(self)
        self.scene = Scene(self)
        self.layoutPixmap = None

        self.setWindowTitle("Puavo WLAN Mapper")
        self.setStatusBar(QStatusBar(self))

        self.view.setScene(self.scene)

        self.setCentralWidget(self.view)

        self.setupDockWidgets()
        self.setupActions()
        self.setupMenus()

    def closeEvent(self, event):
        self.monitorWidget.startStopMonitor(False)

    def sizeHint(self):
        return QSize(800, 600)

    def setupActions(self):
        self.aboutAction = QAction(self)
        self.aboutAction.setText("&About...")
        self.aboutAction.triggered.connect(self.showAboutDialog)

        self.loadAction = QAction(self)
        self.loadAction.setText("&Load layout image...")
        self.loadAction.setShortcut(QKeySequence("Ctrl+O"))
        self.loadAction.triggered.connect(self.loadLayoutImageWithDialog)

        self.quitAction = QAction(self)
        self.quitAction.setText("&Quit")
        self.quitAction.setShortcut(QKeySequence("Ctrl+Q"))
        self.quitAction.triggered.connect(self.close)

    def setupMenus(self):
        menuBar = QMenuBar()

        fileMenu = menuBar.addMenu("&File")
        fileMenu.addAction(self.loadAction)
        fileMenu.addSeparator()
        fileMenu.addAction(self.quitAction)

        viewMenu = menuBar.addMenu("&View")
        viewMenu.addAction(self.monitorDockWidget.toggleViewAction())
        viewMenu.addAction(self.measurementDockWidget.toggleViewAction())
        self.measurementDockWidget.toggleViewAction().setShortcut("Ctrl+M")

        helpMenu = menuBar.addMenu("&Help")
        helpMenu.addAction(self.aboutAction)

        self.setMenuBar(menuBar)

    def setupDockWidgets(self):
        self.monitorDockWidget = QDockWidget(self)
        self.monitorWidget = MonitorWidget(self)
        self.monitorDockWidget.setWidget(self.monitorWidget)
        self.monitorDockWidget.setWindowTitle("Monitor")
        self.addDockWidget(Qt.LeftDockWidgetArea, self.monitorDockWidget)

        self.measurementDockWidget = QDockWidget(self)
        self.measurementWidget = QTableWidget(self.measurementDockWidget)
        self.measurementDockWidget.setWidget(self.measurementWidget)
        self.measurementDockWidget.setWindowTitle("Measurements")
        self.addDockWidget(Qt.BottomDockWidgetArea, self.measurementDockWidget)

    def loadLayoutImageWithDialog(self):
        filepath = QFileDialog.getOpenFileName(self,
                                               "Load layout image",
                                               QDir.currentPath(),
                                               "Images (*.png)")
        if not filepath:
            return

        self.loadLayoutImage(filepath)

    def loadLayoutImage(self, filepath):
        self.layoutPixmap = QPixmap(filepath, "png")
        if self.layoutPixmap.isNull():
            msg = "File {} could not be loaded as a layout image.\n\n" \
                  "Please ensure the layout image is a valid PNG file."
            QMessageBox.critical(self, "Failed to load a layout image",
                                 msg.format(filepath))
        else:
            self.scene.clear()
            self.scene.addPixmap(self.layoutPixmap)
            self.statusBar().showMessage(
                "Loaded layout image {!r}.".format(filepath), 5000)

    def showAboutDialog(self):
        aboutText = QString.fromUtf8(
            "<h1>Puavo WLAN Mapper</h1>"
            "<p>Version 0.1.0</p>"
            "<p>Copyright © 2015 <a href=\"http://opinsys.fi\">Opinsys Oy</a></p>"
            "<p>This program is free software: you can redistribute it and/or "
            "modify it under the terms of the GNU General Public License as "
            "published by the Free Software Foundation, either version 2 of the "
            "License, or (at your option) any later version.</p>"
            "<p>This program is distributed in the hope that it will be useful, but"
            " WITHOUT ANY WARRANTY; without even the implied warranty of "
            "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>"
            "<p>See the <a href=\"https://www.gnu.org/licenses/gpl-2.0.html\">GNU "
            "General Public License</a> for more details.</p>")

        QMessageBox.about(self, "About Puavo WLAN Mapper", aboutText)

def main():
    app = QApplication(sys.argv)

    if app.argc() > 2:
        error_message = "ERROR: invalid number of arguments ({})"
        print(error_message.format(app.argc() - 1), file=sys.stderr)
        print("Usage: {} [LAYOUT_PNG]".format(sys.argv[0]), file=sys.stderr)
        return 1

    win = MainWindow()
    win.show()

    if app.argc() == 2:
        win.loadLayoutImage(sys.argv[1])

    return app.exec_()

if __name__ == "__main__":
   sys.exit(main())
