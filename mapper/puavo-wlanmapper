#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2015 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import division
from __future__ import print_function

import sys

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class View(QGraphicsView):

    ZOOM_FACTOR = 1.1

    def __init__(self, *args):
        QGraphicsView.__init__(self, *args)

    def wheelEvent(self, event):
        if not event.modifiers() & Qt.ControlModifier:
            QGraphicsView.wheelEvent(self, event)
        else:
            self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)

            if event.delta() > 0:
                self.scale(View.ZOOM_FACTOR, View.ZOOM_FACTOR)
            else:
                self.scale(1 / View.ZOOM_FACTOR, 1 / View.ZOOM_FACTOR)

            event.accept()

class Scene(QGraphicsScene):

    def __init__(self, *args):
        QGraphicsScene.__init__(self, *args)

        self.setupAnimation()

    def mousePressEvent(self, event):
        QGraphicsScene.mousePressEvent(self, event)
        if not event.isAccepted() and event.button() == Qt.LeftButton and not event.modifiers():
            dot = Item()
            self.addItem(dot)
            self.dotCount += 1

            dot.setPos(event.scenePos())
            dot.setFlag(QGraphicsItem.ItemIsMovable)
            QGraphicsTextItem("{}".format(self.dotCount), dot)

            event.accept()

    def clear(self):
        QGraphicsScene.clear(self)
        self.setupAnimation()

    def setupAnimation(self):
        timer = QTimeLine(2000)
        timer.setLoopCount(0)
        self.animation = QGraphicsItemAnimation()
        self.animation.setTimeLine(timer)
        self.animation.setScaleAt(0.0, 1, 1)
        self.animation.setScaleAt(0.5, 3, 3)
        self.animation.setScaleAt(1.0, 1, 1)
        self.dotCount = 0

class Item(QGraphicsEllipseItem):

    MEASUREMENT_DOT_SIZE = 20

    def __init__(self):
        QGraphicsEllipseItem.__init__(self,
                                      Item.MEASUREMENT_DOT_SIZE / -2,
                                      Item.MEASUREMENT_DOT_SIZE / -2,
                                      Item.MEASUREMENT_DOT_SIZE,
                                      Item.MEASUREMENT_DOT_SIZE)

        self.setAcceptHoverEvents(True)

    def hoverEnterEvent(self, event):
        self.setCursor(QCursor(Qt.PointingHandCursor))

    def mouseDoubleClickEvent(self, event):
        if self.scene().animation.timeLine().state() == QTimeLine.Running:
            self.scene().animation.timeLine().stop()
            self.scene().animation.setStep(0)
            if self.scene().animation.item() == self:
                event.accept()
                return

        self.scene().animation.setItem(self)
        self.scene().animation.timeLine().start()

        event.accept()

class MainWindow(QMainWindow):

    def __init__(self, *args):
        QMainWindow.__init__(self, *args)

        self.view = View(self)
        self.scene = Scene(self)
        self.layoutPixmap = None

        self.setWindowTitle("Puavo WLAN Mapper")

        self.view.setScene(self.scene)

        self.setCentralWidget(self.view)

        self.setupActions()
        self.setupMenus()

    def setupActions(self):
        self.aboutAction = QAction(self)
        self.aboutAction.setText("&About...")
        self.aboutAction.triggered.connect(self.showAboutDialog)

        self.loadAction = QAction(self)
        self.loadAction.setText("&Load layout image...")
        self.loadAction.setShortcut(QKeySequence("Ctrl+O"))
        self.loadAction.triggered.connect(self.loadLayoutImageWithDialog)

        self.quitAction = QAction(self)
        self.quitAction.setText("&Quit")
        self.quitAction.setShortcut(QKeySequence("Ctrl+Q"))
        self.quitAction.triggered.connect(self.close)

    def setupMenus(self):
        menuBar = QMenuBar()

        fileMenu = menuBar.addMenu("&File")
        fileMenu.addAction(self.loadAction)
        fileMenu.addSeparator()
        fileMenu.addAction(self.quitAction)

        helpMenu = menuBar.addMenu("&Help")
        helpMenu.addAction(self.aboutAction)

        self.setMenuBar(menuBar)

    def loadLayoutImageWithDialog(self):
        filepath = QFileDialog.getOpenFileName(self,
                                               "Load layout image",
                                               QDir.currentPath(),
                                               "Images (*.png)")
        if not filepath:
            return

        self.loadLayoutImage(filepath)

    def loadLayoutImage(self, filepath):
        self.layoutPixmap = QPixmap(filepath, "png")
        if self.layoutPixmap.isNull():
            msg = "File {} could not be loaded as a layout image.\n\n" \
                  "Please ensure the layout image is a valid PNG file."
            QMessageBox.critical(self, "Failed to load a layout image",
                                 msg.format(filepath))
        else:
            self.scene.clear()
            self.scene.addPixmap(self.layoutPixmap)

    def showAboutDialog(self):
        aboutText = QString.fromUtf8(
            "<h1>Puavo WLAN Mapper</h1>"
            "<p>Version 0.1.0</p>"
            "<p>Copyright Â© 2015 <a href=\"http://opinsys.fi\">Opinsys Oy</a></p>"
            "<p>This program is free software: you can redistribute it and/or "
            "modify it under the terms of the GNU General Public License as "
            "published by the Free Software Foundation, either version 2 of the "
            "License, or (at your option) any later version.</p>"
            "<p>This program is distributed in the hope that it will be useful, but"
            " WITHOUT ANY WARRANTY; without even the implied warranty of "
            "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>"
            "<p>See the <a href=\"https://www.gnu.org/licenses/gpl-2.0.html\">GNU "
            "General Public License</a> for more details.</p>")

        QMessageBox.about(self, "About Puavo WLAN Mapper", aboutText)

def main():
    app = QApplication(sys.argv)

    if app.argc() > 2:
        error_message = "ERROR: invalid number of arguments ({})"
        print(error_message.format(app.argc() - 1), file=sys.stderr)
        print("Usage: {} [LAYOUT_PNG]".format(sys.argv[0]), file=sys.stderr)
        return 1

    win = MainWindow()
    win.show()

    if app.argc() == 2:
        win.loadLayoutImage(sys.argv[1])

    return app.exec_()

if __name__ == "__main__":
   sys.exit(main())
