#!/usr/bin/env ruby1.9.1
# coding: utf-8

# = Puavo's Tunneled WLAN Access Point
#
# Author    :: Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>
# Copyright :: Copyright (C) 2015 Opinsys Oy
# License   :: GPLv2+
#
# == Usage
#
# Get help:
#   puavo-wlanap --help

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.

# Standard library modules.
require 'digest'
require 'erb'
require 'fileutils'
require 'getoptlong'
require 'pathname'
require 'socket'
require 'timeout'

require 'puavo/etc'
require 'puavo/rest-client'

module Log

  def self.info(msg)
    Log.log(:INFO, msg)
  end

  def self.log(priority, msg)
    STDERR.puts("#{Time.now.utc} puavo-wlanap[#{Process.pid}]: " \
                "#{priority}: #{msg}")
  end

  def self.warning(msg)
    Log.log(:WARNING, msg)
  end

  def self.error(msg)
    Log.log(:ERROR, msg)
  end

  def self.exception(msg, e)
    Log.error(msg)
    Log.error("#{e.exception}: #{e.message}")
    e.backtrace.each { |line| Log.error("\tfrom: #{line}") }
  end

end

module Dot11

  BAND_2G = 1
  BAND_5G = 2

  CHANNELS_2G = [ 1,  6, 11]
  CHANNELS_5G = [36, 40, 44, 48]

  CHANNELS = {
    BAND_2G           => CHANNELS_2G,
    BAND_5G           => CHANNELS_5G,
    BAND_2G | BAND_5G => CHANNELS_2G + CHANNELS_5G,
  }

  class Phy

    attr_accessor :channel
    attr_reader   :name

    def initialize(name)
      @name = name
    end

    def add_vif(name)
      run_or_fail('iw', 'phy', @name, 'interface', 'add', name, 'type', 'managed')
      Vif.new(name)
    end

    def each_vif
      retval    = nil
      phy_found = false

      IO.popen(['iw', 'dev']) do |io|
        io.each_line do |line|

          is_phy_line = line =~ /^phy#(\d+)$/
          unless phy_found
            phy_found = "phy#{$1}" == @name
            next
          end

          # Encountering another phy line ends the current phy section.
          break if is_phy_line

          # Ignore all but interface lines.
          if line =~ /^\s+Interface (.*)$/
            retval = yield Vif.new($1)
          end

        end
      end

      fail 'failed to list interfaces' unless $?.success?
      retval
    end

    def band
      band = 0

      IO.popen(['iw', 'phy', @name, 'info']) do |io|
        until io.eof? do
          next unless io.gets =~ /^\s+Frequencies:$/

          io.gets =~ /^\s+\* (\d+) MHz .*$/
          case $1
          when '2412'
            band |= Dot11::BAND_2G
          when '5180'
            band |= Dot11::BAND_5G
          else
            Log.warning("phy {@name} has an unsupported band")
          end
        end
      end
      fail 'failed to query supported bands' unless $?.success?

      band
    end

    def ht_capab(channel)
      is_ht20sgi_capab = IO.popen(['iw', @name, 'info']) do |io|
        !io.grep(/^\s+RX HT20 SGI.*$/).empty?
      end
      $?.success? or fail 'failed to query HT20 SGI capability'

      is_ht40sgi_capab = IO.popen(['iw', @name, 'info']) do |io|
        !io.grep(/^\s+RX HT40 SGI.*$/).empty?
      end
      $?.success? or fail 'failed to query HT40 SGI capability'

      case channel
      when 1, 6, 11
        '[HT20]'
      when 36, 44
        '[HT40+]' + (is_ht40sgi_capab ? '[SHORT-GI-40]' : '')
      when 40, 48
        '[HT40-]' + (is_ht40sgi_capab ? '[SHORT-GI-40]' : '')
      else
        fail "unsupported channel #{channel}"
      end + (is_ht20sgi_capab ? '[SHORT-GI-20]' : '')

    end

    def set_txpower_limit(txpower_dBm)
      Log.info("limit txpower of phy #{@name} to #{txpower_dBm}dBm")
      txpower = (txpower_dBm * 100).to_s
      run_or_fail('iw', 'phy', @name, 'set', 'txpower', 'limit', txpower)
    end

  end

  class Vif

    attr_reader :name

    def initialize(name)
      @name = name
    end

    def del
      run_or_fail('iw', 'dev', @name, 'del')
    end

    def scan(band)
      # Prime results with worst possible signal levels.
      results = {}
      Dot11::CHANNELS[band].each { |ch| results[ch] = -999 }

      IO.popen(['iwlist', @name, 'scan']) do |io|
        io.each_line do |line|
          next unless line =~ /^\s+Cell [0-9]+ - Address: .*$/

          io.readline.strip =~ /^Channel:([0-9]+)$/
          channel = $1.to_i

          io.readline.strip # Ignore frequency line.

          io.readline.strip =~ /^Quality=[0-9]+\/[0-9]+\s+Signal level=(-[0-9]+) dBm.*$/
          signal_level = $1.to_i

          if results.has_key?(channel)
            results[channel] = signal_level if results[channel] < signal_level
          end
        end
      end
      $?.success? or fail "failed to scan with interface #{@name}"

      # Return channels in ascending signal level order.
      Hash[results.sort_by { |channel, signal_level| signal_level }].keys
    end

    def up
      run_or_fail('ip', 'link', 'set', 'dev', @name, 'up')
    end

  end

  def self.each_phy
    Dir.glob('/sys/class/ieee80211/*') do |phy_path|
      phy_name = File.basename(phy_path)
      yield Phy.new(phy_name)
    end
  end

end

module PuavoAPI

  def self.get_nets
    nets_wait = 1
    while true
      client = PuavoRestClient.new
      response = client.get("/v3/devices/#{PUAVO_ETC.hostname}/wlan_networks")

      nets = response.parse.select { |net| net['wlan_ap'] } .each do |net|
        # Magic SSID Mangling! The following Magic SSID is substituted
        # with a SSID derived from the hostname. This lets us configure
        # AP-specific networks easily via Puavo.
        next unless net['ssid'] =~ /^le8Yuek9Some5ee$/
        net['ssid'] = PUAVO_ETC.hostname.tr(' ', '')
      end

      return nets unless nets.empty?

      nets_wait = [nets_wait * 2, 3600].min
      sleep nets_wait
    end
  end

  def self.get_conf
    client = PuavoRestClient.new
    response = client.get("/v3/devices/#{PUAVO_ETC.hostname}")

    conf = {}
    response.parse['tags'].each do |tag|
      if /^txpower:([0-9]+)$/ =~ tag
        txpower = $1.to_i
        ## Multiple tags starting with txpower: might be given, let's
        ## take the most restrictive.
        conf[:txpower] = [conf.fetch(:txpower, txpower), txpower].min
      elsif /^txpower5:([0-9]+)$/ =~ tag
        txpower5 = $1.to_i
        ## Multiple tags starting with txpower5: might be given, let's
        ## take the most restrictive.
        conf[:txpower5] = [conf.fetch(:txpower5, txpower5), txpower5].min
      end
    end

    conf
  end

end

RUNDIR                     = '/run/puavo-wlanap'
CTRLSOCKET                 = File.join(RUNDIR, 'ctrlsocket')
THIS_SCRIPT                = Pathname.new($0).realpath
HOSTAPD_ACTION_SCRIPT      = THIS_SCRIPT.dirname.join('puavo-wlanap-hostapd-action')
HOSTAPD_CTRL_INTERFACE_DIR = File.join(RUNDIR, 'hostapd')

def run_or_fail(cmd, *args)
  cmd_string = ([cmd] + args).join(' ')
  system(cmd, *args)
  $?.success? or fail "command '#{cmd_string}' failed"
end

def hexdigest15(str)
  md5sum = Digest::MD5.new
  md5sum << str
  md5sum.hexdigest[0..14]
end

class Conf

  def write(filepath, mode=0640)
    File.open(filepath, 'w', mode) do |file|
      conf = ERB.new(template).result(binding)
      file.write(conf)
    end
  end

end

class HostapdConf < Conf

  def initialize(kwargs = {})
    @bridge         = kwargs.fetch(:bridge)
    @channel        = kwargs.fetch(:channel)
    @ctrl_interface = kwargs.fetch(:ctrl_interface)
    @ht_capab       = kwargs.fetch(:ht_capab)
    @hw_mode        = kwargs.fetch(:hw_mode)
    @interface      = kwargs.fetch(:interface)
    @ssid           = kwargs.fetch(:ssid)
    @wpa            = kwargs.fetch(:wpa)
    @wpa_passphrase = kwargs.fetch(:wpa_passphrase)
  end

  def template
    <<'EOF'
interface=<%= @interface %>
driver=nl80211
country_code=FI
hw_mode=<%= @hw_mode %>
channel=<%= @channel %>
max_num_sta=1000
wmm_enabled=1
ctrl_interface=<%= @ctrl_interface %>
ieee80211n=1
ht_capab=<%= @ht_capab %>
wds_sta=1
ssid=<%= @ssid %>
bridge=<%= @bridge %>
wpa=<%= @wpa %><% if @wpa != 0 %>
auth_algs=3
wpa_passphrase=<%= @wpa_passphrase %>
rsn_pairwise=CCMP
wpa_key_mgmt=WPA-PSK
eapol_version=1
eapol_key_index_workaround=1
eap_reauth_period=0
wpa_strict_rekey=0
wpa_group_rekey=0
wpa_gmk_rekey=0<% end %>
EOF
  end

end

class VtundConf < Conf

  def initialize(kwargs = {})
    @bridge = kwargs.fetch(:bridge)
  end

  def template
    <<'EOF'
options {
    syslog daemon;
}

puavo-wlanap {
    passwd    wlan;
    type      ether;
    proto     udp;
    speed     0;
    encrypt   no;
    compress  no;
    multi     yes;

    up {
        program "<%= THIS_SCRIPT %> --ctrlmsg 'vtun-up:%%:<%= @bridge %>'";
    };
}
EOF
  end

end

module Services

  module Spawnable
    attr_reader :name
    attr_reader :pid

    def spawn
      @pid = Process.spawn(@command, *@args)
    end

    def kill(sigterm_timeout=3)
      Process.kill('SIGTERM', @pid)
      begin
        Timeout.timeout(sigterm_timeout) do
          Process.waitpid(@pid)
        end
      rescue Timeout::Error
        Process.kill('SIGKILL', @pid)
        Process.waitpid(@pid)
      end
    end

  end

  class Dhclient
    include Services::Spawnable

    def initialize(kwargs = {})
      @bridge  = kwargs.fetch(:bridge)

      @args    = ['-d', @bridge]
      @command = 'dhclient'
      @name    = "#{@command}_#{@bridge}"

    end

  end

  class Hostapd
    include Services::Spawnable

    attr_reader :phy
    attr_reader :vif

    def initialize(kwargs = {})
      @bridge = kwargs.fetch(:bridge)
      @net    = kwargs.fetch(:net)
      @phy    = kwargs.fetch(:phy)
      @vif    = kwargs.fetch(:vif)

      @command  = 'hostapd'
      @name     = "#{@command}_#{@vif.name}"
      @conffile = File.join(RUNDIR, "#{@name}.conf")
      @args     = [@conffile]

      HostapdConf.new(:bridge         => @bridge,
                      :channel        => @phy.channel,
                      :ctrl_interface => HOSTAPD_CTRL_INTERFACE_DIR,
                      :ht_capab       => @phy.ht_capab(@phy.channel),
                      :hw_mode        => Dot11::CHANNELS_5G.include?(@phy.channel) ? 'a' : 'g',
                      :interface      => @vif.name,
                      :ssid           => @net['ssid'],
                      :wpa            => @net['type'] == 'open' ? 0 : 2,
                      :wpa_passphrase => @net['password']).write(@conffile)
    end

  end

  class HostapdCli
    include Services::Spawnable

    attr_reader :hostapd

    def initialize(kwargs = {})
      @hostapd = kwargs.fetch(:hostapd)

      @vif     = @hostapd.vif
      @command = 'hostapd_cli'
      @name    = "#{@command}_#{@vif.name}"
      @args    = ["-i#{@vif.name}",
                  "-p#{HOSTAPD_CTRL_INTERFACE_DIR}",
                  "-a#{HOSTAPD_ACTION_SCRIPT}"]
    end

    def spawn
      hostapd_socket = "#{HOSTAPD_CTRL_INTERFACE_DIR}/#{@vif.name}"
      Timeout.timeout(5) do
        loop do
          break if File.exists?(hostapd_socket)
          Log.info("waiting for hostapd control socket #{hostapd_socket}")
          sleep 0.1
        end
      end
      Log.info("found hostapd control socket #{hostapd_socket}")
      super
    end

  end

  class Vtund
    include Services::Spawnable

    def initialize(kwargs = {})
      @address = kwargs.fetch(:address)
      @bridge  = kwargs.fetch(:bridge)
      @port    = kwargs.fetch(:port)

      @command  = 'vtund'
      @name     = "#{@command}_#{@bridge}"
      @conffile = File.join(RUNDIR, "#{@name}.conf")
      @args     = ['-n', '-P', @port.to_s, '-f', @conffile, 'puavo-wlanap', @address]

      VtundConf.new(:bridge => @bridge).write(@conffile)

    end
  end

end

class AccessPoint

  VTUN_ADDRESS = 'wlangw'
  VTUN_PORT    = 45045

  def initialize(kwargs = {})
    @bridges       = {}
    @bss_index     = -1
    @conf          = nil
    @ctrlconn      = nil
    @ctrlconn_time = nil
    @ctrlserv      = nil
    @nets          = nil
    @services      = {}
    @spawn_queue   = []
    @spawn_time    = Time.at(0)
    @vifs          = []
    @vtun_address  = kwargs.fetch(:vtun_address, VTUN_ADDRESS)
    @vtun_port     = kwargs.fetch(:vtun_port, VTUN_PORT)
  end

  def run
    Log.info('starting')
    FileUtils.mkdir_p(RUNDIR)
    File.open(File.join(RUNDIR, 'lock'), File::RDWR | File::CREAT, 0640) do |lockfile|
      unless lockfile.flock(File::LOCK_EX | File::LOCK_NB)
        Log.error("another instance of puavo-wlanap is already running in #{RUNDIR}")
        return 1
      end
      run_locked
    end
  end

  private

  def run_locked
    @conf = PuavoAPI.get_conf
    @nets = PuavoAPI.get_nets

    if @nets.empty?
      Log.error('no networks defined')
      return 1
    end

    # At most 4 BSSes per radio are supported.
    ignored_nets = @nets.slice!(4..-1)
    if !ignored_nets.nil? && !ignored_nets.empty?
      Log.warning("more than 4 networks defined, ignoring " +
                  ignored_nets.map{ |n| n['ssid'] }.join(', '))
    end

    Signal.trap('EXIT') do
      Log.info('exiting')
      Process.kill('-SIGTERM', 0)

      @vifs.each do |vif|
        begin
          vif.del
        rescue StandardError => e
          Log.exception("failed to delete vif #{vif.name}", e)
        end
      end

      @bridges.each_value do |bridge|
        # Ignore errors, we are already exiting.
        system('ip', 'link', 'set', 'dev', bridge, 'down')
        system('brctl', 'delbr', bridge)
      end

      FileUtils.rm_rf(RUNDIR)
      Log.info('bye')
    end

    [:HUP, :USR1, :USR2].each { |s| Signal.trap(s, 'SIG_IGN') }

    sigqueue = []
    selfpipe_r, selfpipe_w = IO.pipe

    [:CHLD, :INT, :QUIT, :TERM].each do |signal|
      Signal.trap(signal) do
        sigqueue << signal
        selfpipe_w.write_nonblock('o')
      end
    end

    @ctrlserv = UNIXServer.new(CTRLSOCKET)

    setup_bridges
    setup_phys

    Log.info('started')
    loop do
      signal = sigqueue.pop
      case signal

      when :INT, :QUIT, :TERM
        Log.error("received fatal signal #{signal}")
        return 1

      when :CHLD
        child_pid = Process.wait(0, Process::WNOHANG)
        if @services.has_key?(child_pid)
          child_name = @services[child_pid].name
          Log.error("child service #{child_name} died")
          return 1
        end

      else
        reads    = [selfpipe_r, @ctrlconn.nil? ? @ctrlserv : @ctrlconn]
        timeouts = []

        unless @ctrlconn.nil?
          timeouts << 5 - (Time.now - @ctrlconn_time)
        end

        unless @spawn_queue.empty?
          timeouts << 5 - (Time.now - @spawn_time)
        end

        timeout = timeouts.empty? ? nil : [0, timeouts.min].max

        ready = IO.select(reads, [], [], timeout)

        if ready.nil?

          if @ctrlconn && Time.now - @ctrlconn_time > 5
            Log.warning('control socket connection timeout')
            close_ctrlconn
          end

          if !@spawn_queue.empty? && Time.now - @spawn_time > 5
            @spawn_queue.shift.each { |service| spawn_service(service) }
            @spawn_time = Time.now
          end

          next
        end

        selfpipe_r.read_nonblock(1) if ready[0].include?(selfpipe_r)
        accept_ctrlconn             if ready[0].include?(@ctrlserv)
        handle_ctrlconn             if ready[0].include?(@ctrlconn)

      end
    end
  end

  def accept_ctrlconn
    @ctrlconn      = @ctrlserv.accept
    @ctrlconn_time = Time.now
  end

  def close_ctrlconn
    @ctrlconn.close

    @ctrlconn      = nil
    @ctrlconn_time = nil
  end

  def handle_ctrlconn
    if @ctrlconn.eof?
      Log.warning('received invalid control message')
    else
      handle_ctrlmsg(@ctrlconn.readline)
    end
  ensure
    close_ctrlconn
  end

  def handle_ctrlmsg(line)
    line.strip!
    cmd, sep, args = line.partition(':')
    case cmd
    when 'hostapd-event'
      handle_ctrlmsg_hostapd_event(args)
    when 'udev-event'
      handle_ctrlmsg_udev_event(args)
    when 'vtun-up'
      handle_ctrlmsg_vtun_up(args)
    else
      Log.warning("received unknown control message: #{line}")
    end
  end

  def handle_ctrlmsg_hostapd_event(args)
    iface, sep, tail = args.partition(':')
    if sep.empty?
      Log.warning("received invalid hostapd-event: #{args}")
      return false
    end

    event, sep, tail = tail.partition(':')
    if sep.empty?
      Log.warning("received invalid hostapd-event: #{args}")
      return false
    end

    case event

    when 'AP-ENABLED'
      @spawn_time = Time.at(0)

    when 'AP-STA-CONNECTED'
      mac = tail

    when 'AP-STA-DISCONNECTED'
      mac = tail

    else
      Log.warning("received unhandled hostapd-event: #{args}")
      return false

    end

    true
  end

  def handle_ctrlmsg_udev_event(args)
    action, phy_name = args.split(':')
    Log.info("udev action: #{action} phy #{phy_name}")
    case action
    when 'add'
      add_phy(Dot11::Phy.new(phy_name))
    when 'remove'
      remove_phy(Dot11::Phy.new(phy_name))
    else
      Log.warning("ignoring unexpected udev action: #{action}")
      return
    end
  end

  def handle_ctrlmsg_vtun_up(args)
    iface, *bridge = args.split(':')
    if bridge.length == 1
      bridge = bridge[0]
      run_or_fail('ip', 'link', 'set', 'dev', iface, 'up')
      run_or_fail('brctl', 'addif', bridge, iface)
      spawn_service(Services::Dhclient.new(:bridge => bridge))
    else
      Log.warning("received invalid vtun-up arguments #{args}")
    end
  end

  def spawn_service(service)
    pid = service.spawn
    @services[pid] = service
    Log.info("spawned #{service.name}")
  end

  def setup_bridge(ssid)
    bridge = hexdigest15(ssid)
    run_or_fail('brctl', 'addbr', bridge)
    @bridges[ssid] = bridge
    run_or_fail('brctl', 'setfd', bridge, '0')
    run_or_fail('ip', 'link', 'set', 'dev', bridge, 'up')

    spawn_service(Services::Vtund.new(:bridge  => bridge,
                                      :address => @vtun_address,
                                      :port    => @vtun_port))
    bridge
  end

  def setup_bridges
    @nets.each { |net| setup_bridge(net['ssid']) }
  end

  def add_phy(phy)
    phy.each_vif { |vif| vif.del }

    @nets.each do |net|
      @bss_index += 1

      vif = phy.add_vif("hostapd#{@bss_index}")
      if vif.nil?
        Log.error("failed to add vif to phy #{phy.name}")
        return
      end
      @vifs << vif

      if phy.channel.nil?
        vif.up
        channels = vif.scan(phy.band)
        phy.channel = channels[0]
      end

      bridge = @bridges.fetch(net['ssid'])
      hostapd     = Services::Hostapd.new(:bridge => bridge,
                                          :phy    => phy,
                                          :vif    => vif,
                                          :net    => net)
      hostapd_cli = Services::HostapdCli.new(:hostapd => hostapd)
      @spawn_queue << [hostapd, hostapd_cli]
    end

    phy.set_txpower_limit(@conf.fetch(:txpower, 20))
    if Dot11::CHANNELS_5G.include?(phy.channel) && @conf.has_key?(:txpower5)
      phy.set_txpower_limit(@conf[:txpower5])
    end

  end

  def remove_phy(phy)
    dying_hostapds     = []
    dying_hostapd_clis = []

    # Remove all soon-to-be-killed services from the array before
    # killing any to avoid dependent services to die and interrupt us.
    @services.reject! do |pid, service|
      if service.class == Services::Hostapd && phy.name == service.phy.name
        dying_hostapds << service
        true
      elsif service.class == Services::HostapdCli && phy.name == service.hostapd.phy.name
        dying_hostapd_clis << service
        true
      else
        false
      end
    end

    dying_hostapd_clis.each { |hostapd_cli| hostapd_cli.kill }
    dying_hostapds.each { |hostapd| hostapd.kill }
  end

  def setup_phys
    Dot11.each_phy do |phy|
      begin
        add_phy(phy)
      rescue StandardError => e
        Log.exception("failed to setup phy #{phy.name}, ignoring it", e)
      end
    end
  end

end

def main
  opts    = {}
  ctrlmsg = nil

  GetoptLong.new(
    ['--ctrlmsg'                   , GetoptLong::REQUIRED_ARGUMENT],
    ['--help', '-h'                , GetoptLong::NO_ARGUMENT],
    ['--vtun-address'              , GetoptLong::REQUIRED_ARGUMENT],
    ['--vtun-port'                 , GetoptLong::REQUIRED_ARGUMENT],
  ).each do |opt, arg|
    case opt
    when '--ctrlmsg'
      unless ctrlmsg.nil?
        Log.error('--ctrlmsg can be given only once')
        return 1
      end
      ctrlmsg = arg

    when '--help'
      puts <<EOF
Usage: puavo-wlanap [OPTION]...

Puavo's Tunneled WLAN Access Point.

Options:
 -h, --help
         Display this help and exit.

     --vtun-address ADDRESS
         Set the address of the vtun server, default: #{AccessPoint::VTUN_ADDRESS}

     --vtun-port PORT
         Set the port of the vtun server, default: #{AccessPoint::VTUN_PORT}

EOF
      return 0

    when '--vtun-address'
      if opts.has_key? :vtun_address
        Log.error('--vtun-address can be given only once')
        return 1
      end
      opts[:vtun_address] = arg

    when '--vtun-port'
      if opts.has_key? :vtun_port
        Log.error('--vtun-port can be given only once')
        return 1
      end
      unless arg =~ /^[1-9][0-9]*$/
        Log.error("invalid port number (#{arg})")
        return 1
      end
      opts[:vtun_port] = arg.to_i

    end
  end

  if ARGV.length != 0
    Log.error("invalid number of arguments (#{ARGV.length}), expected 0")
    return 1
  end

  unless ctrlmsg.nil?
    UNIXSocket.open(CTRLSOCKET) do |ctrlsocket|
      ctrlsocket.puts(ctrlmsg)
    end
    return 0
  end

  AccessPoint.new(opts).run
end

exit(main())
