#!/bin/bash

set -eubm

on_sigchld()
{
    for net in "${PUAVO_WLANAP_NETS[@]}"; do
        IFS=':' read _ ssid _ <<<"${net}"
        if [ -r "${PUAVO_WLANAP_RUNDIR}/${ssid}_vtund.pid" ]; then
            read vtundpid <"${PUAVO_WLANAP_RUNDIR}/${ssid}_vtund.pid"
            kill -0 "$vtundpid" 2>/dev/null && continue
            puavo_wlanap_fail "tunnel collapsed, exiting"
        fi
    done
}

on_exit()
{
    local -r exitval=$?

    set +eu

    trap - SIGCHLD # We are not interested in our children anymore, they
                   # all are gonna die anyways.

    for net in "${PUAVO_WLANAP_NETS[@]}"; do
        IFS=':' read _ ssid _ <<<"${net}"
        dhclient -r "${ssid}"
    done
    
    if [ -n "$sleeppid" ]; then
        kill -0 "$sleeppid" 2>/dev/null && kill "$sleeppid"
    fi

    for iface in "${PUAVO_WLANAP_IFACES[@]}"; do
        if [ -r "${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.pid" ]; then
            read hostapdpid <"${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.pid"
            kill -0 "$hostapdpid" 2>/dev/null && kill "$hostapdpid"
        fi
    done

    for net in "${PUAVO_WLANAP_NETS[@]}"; do
        IFS=':' read _ ssid _ <<<"${net}"
        if [ -r "${PUAVO_WLANAP_RUNDIR}/${ssid}_dhclient.pid" ]; then
            read dhclientpid <"${PUAVO_WLANAP_RUNDIR}/${ssid}_dhclient.pid"
            kill -0 "$dhclientpid" 2>/dev/null && kill "$dhclientpid"
        fi
    done

    for net in "${PUAVO_WLANAP_NETS[@]}"; do
        IFS=':' read _ ssid _ <<<"${net}"
        read vtundpid <"${PUAVO_WLANAP_RUNDIR}/${ssid}_vtund.pid"
        kill -0 "$vtundpid" 2>/dev/null && kill "$vtundpid"
    done

    rm -rf "${PUAVO_WLANAP_RUNDIR}"

    exit $exitval
}

read_puavo_files()
{
    if [ -r "/etc/puavo/wlan/ssid" ]; then
        readarray -n0 -t PUAVO_WLANAP_NETS </etc/puavo/wlan/ssid
    fi
}

validate_config()
{
    if [ ${#PUAVO_WLANAP_NETS[@]} -eq 0 ]; then
        puavo_wlanap_fail "no networks defined"
        return 1
    fi

    for net in "${PUAVO_WLANAP_NETS[@]}"; do
        IFS=':' read auth ssid psk <<<"${net}"
        case "${auth}" in
            open)
                if [ -n "${psk}" ]; then
                    puavo_wlanap_warn "auth type is 'open', but psk was defined"
                fi
                ;;
            psk)
                if [ "${#psk}" -lt 8 -o "${#psk}" -gt 63 ]; then
                    puavo_wlanap_fail "psk must be 8-63 characters long"
                    return 1
                fi
                ;;
            *)
                puavo_wlanap_fail "unknown auth type '${auth}'"
                return 1
                ;;
        esac
    done
}

get_bssid()
{
    local -r iface=$1
    local -r mac_head=$(ifconfig "${iface}" | head -n1 | sed -rn 's/.*HWaddr (([0-9a-f][0-9a-f]:){5})([0-9a-f])[0-9a-f]\s*$/\1\3/p')
    local mac_tail=0
    local mac="${mac_head}${mac_tail}"

    [ -n "${mac}" ] || return 1

    while [ "${mac_tail}" != "10" ]; do
        ifconfig "${iface}" hw ether "${mac}" >/dev/null 2>/dev/null && {
            echo "${mac}"
            return 0
        }
        mac_tail=$(echo "obase=16; ${mac_tail} + 1" | bc)
        mac="${mac_head}${mac_tail}"
    done
    return 1
}

get_amode_ifaces()
{
    find /sys/class/net -maxdepth 1 -type l -printf '%f\n' | while read iface; do
        grep -q '^DEVTYPE=wlan$' "/sys/class/net/${iface}/uevent" || continue

        driver=$(sed -rn 's/^DRIVER=(.*)$/\1/p' "/sys/class/net/${iface}/device/uevent")
        [ -n "${driver}" ] || {
            puavo_wlanap_warn "could not determine the driver of ${iface}, skipping"
            continue
        }

        grep -q "${driver}" "${PUAVO_WLANAP_DATADIR}/supported_drivers" || continue

        iwconfig "${iface}" | head -n1 | grep -q 'IEEE 802.11abgn ' || continue

        echo "${iface}"
    done
}

write_hostapd_conf()
{
    local ssid_count
    local bssid

    for iface in "${PUAVO_WLANAP_IFACES[@]}"; do
        ssid_count=0
        bssid=$(get_bssid "${iface}")

        [ -n "${bssid}" ] || {
            puavo_wlanap_fail "failed to find the first address in the block"
            return 1
        }

        # Write interface-specific hostapd configs.
        sed -e "s|#{PUAVO_WLANAP_IFACE}|${iface}|g" \
            -e "s|#{PUAVO_WLANAP_BSSID}|${bssid}|g" \
            -e "s|#{PUAVO_WLANAP_RUNDIR}|${PUAVO_WLANAP_RUNDIR}|g" \
            "${PUAVO_WLANAP_DATADIR}/hostapd.conf" \
            >"${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.conf"

        for net in "${PUAVO_WLANAP_NETS[@]}"; do
            IFS=':' read auth ssid psk <<<"${net}"

            # Append SSID-specific hostapd configs.
            cat "${PUAVO_WLANAP_DATADIR}/${auth}_hostapd.conf" \
                >>"${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.conf"
            sed -i \
                -e "s|#{PUAVO_WLANAP_BSS}|${iface}_${ssid_count}|g" \
                -e "s|#{PUAVO_WLANAP_SSID}|${ssid}|g" \
                -e "s|#{PUAVO_WLANAP_PSK}|${psk}|g" \
                "${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.conf"
            ssid_count=$((ssid_count + 1))
        done
    done
}

write_vtund_conf()
{
    for net in "${PUAVO_WLANAP_NETS[@]}"; do
        IFS=':' read auth ssid psk <<<"${net}"

        # Write SSID-specific vtund configs.
        sed -e "s|#{PUAVO_WLANAP_LIBDIR}|${PUAVO_WLANAP_LIBDIR}|g" \
            -e "s|#{PUAVO_WLANAP_SSID}|${ssid}|g" \
            -e "s|#{PUAVO_WLANAP_RUNDIR}|${PUAVO_WLANAP_RUNDIR}|g" \
            "${PUAVO_WLANAP_DATADIR}/vtund.conf" \
            >"${PUAVO_WLANAP_RUNDIR}/${ssid}_vtund.conf"
    done
}

# We don't know yet where our data, libs and configs have been
# installed, but we do know that the following script knows it and we do
# know where the following script is (its in PATH!).
. puavo-wlanap-env

. "${PUAVO_WLANAP_DATADIR}/config"

# The user might have deleted the configuration file, that's ok.
[ -r "${PUAVO_WLANAP_CONFDIR}/config" ] && . "${PUAVO_WLANAP_CONFDIR}/config"

. "${PUAVO_WLANAP_LIBDIR}/common.sh"

[ $# -lt 2 ] || puavo_wlanap_usage_fail "too many arguments" "[--daemon]"

if [ $# -eq 1 ]; then
    if [ "$1" = "--daemon" ]; then
        daemon --noconfig --stderr='daemon.info' --name='puavo-wlanap' -- puavo-wlanap
        exit 0
    fi
    puavo_wlanap_usage_fail "unexpected argument '$1'" "[--daemon"]
fi

trap on_exit EXIT

mkdir -p "${PUAVO_WLANAP_RUNDIR}"

read_puavo_files

validate_config

write_hostapd_conf

write_vtund_conf

# Trap SIGCHLD to exit when any of underlying the components fails.
trap on_sigchld SIGCHLD

for net in "${PUAVO_WLANAP_NETS[@]}"; do
    IFS=':' read _ ssid _ <<<"${net}"

    vtund -n -f "${PUAVO_WLANAP_RUNDIR}/${ssid}_vtund.conf" \
        -P "${PUAVO_WLANAP_GWPORT}" \
        "${ssid}" "${PUAVO_WLANAP_GWADDR}" &
    echo $! >"${PUAVO_WLANAP_RUNDIR}/${ssid}_vtund.pid"
done

sleep 8
for iface in "${PUAVO_WLANAP_IFACES[@]}"; do
    hostapd -B -P "${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.pid" "${PUAVO_WLANAP_RUNDIR}/${iface}_hostapd.conf"
done

while true; do
    sleep 3 &
    sleeppid=$!
    wait $sleeppid

    puavo_wlanap_report_status || true
done
