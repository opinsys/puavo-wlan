#!/usr/bin/env ruby1.9.1
# Copyright (C) 2015 Opinsys
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

require 'fileutils'
require 'getoptlong'

require 'puavo/etc'
require 'puavo/rest-client'

CONF = {
  :rundir       => '/run/puavo-wlanap',
  :vtun_address => 'wlangw',
  :vtun_port    => 45045,
}

HELP = <<EOF
Usage: puavo-wlanap [OPTION]...

Tunneled WLAN accesspoint.

Options:
 -h, --help                    display this help and exit
     --rundir DIR              runtime directory, default: #{CONF[:rundir]}
     --vtun-address ADDRESS    vtun server address, default: #{CONF[:vtun_address]}
     --vtun-port PORT          vtun server port, default: #{CONF[:vtun_port]}

EOF

def get_iface_driver(iface)
  File.open(File.join('/sys/class/net', iface, 'device', 'uevent')) do |file|
    file.each_line do |line|
      next unless /^DRIVER=(.*)$/ =~ line
      return $1
    end
  end
  nil
end

def has_supported_driver(iface)
  driver = get_iface_driver iface
  ['ath9k', 'rt2800pci', 'rt2800usb'].include? driver
end

def is_wlan_iface(iface)
  File.open(File.join('/sys/class/net', iface, 'uevent')) do |file|
    file.each_line do |line|
      return true if /^DEVTYPE=wlan$/ =~ line
    end
  end
  false
end

def get_hw_mode(iface)
  IO.popen(['iwconfig', iface]) do |io|
    line = io.gets
    io.close
    return nil if line.nil?
    return nil if not $?.success?
    line =~ /^.* IEEE 802.11([a-z]+).*$/
    $1
  end
end

def get_supported_channels(iface)
  channels = []
  hw_mode = get_hw_mode iface
  channels << 1 << 6 << 11 if hw_mode.include? 'g'
  channels << 36 << 40 << 44 << 48 if hw_mode.include? 'a'
  channels
end

def iter_suitable_ifaces(hw_mode='')
  Dir.glob('/sys/class/net/*') do |path|
    iface = File.basename(path)
    next unless is_wlan_iface iface
    next unless has_supported_driver iface
    next unless hw_mode.chars.map { |c| get_hw_mode(iface).include? c }.all?
    yield iface
  end
end

def find_nodes(iface)
  IO.popen(['iwlist', iface, 'scan']) do |io|
    io.each_line do |line|
      next unless line =~ /^\s+Cell [0-9]+ - Address: .*$/

      io.readline.strip =~ /^Channel:([0-9]+)$/
      channel = $1.to_i

      io.readline.strip # Ignore frequency line.

      io.readline.strip =~ /^Quality=[0-9]+\/[0-9]+\s+Signal level=(-[0-9]+) dBm.*$/
      signal_level = $1.to_i

      yield channel, signal_level
    end
    io.close
  end
  $?.success?
end

def get_preferred_channels(iface)
  channels = get_supported_channels iface

  # Prime results with worst possible signal levels.
  results = {}
  channels.each { |ch| results[ch] = -999 }

  # Update results with scan results.
  find_nodes iface do |ch, siglvl|
    next unless results.has_key? ch
    results[ch] = siglvl if results[ch] < siglvl
  end or die "failed to find nodes"

  # Return channels in ascending signal level order.
  Hash[results.sort_by { |ch, siglvl| siglvl }].keys
end

def fetch_nets()
  client = PuavoRestClient.new()
  res = client.get("/v3/devices/#{PUAVO_ETC.hostname}/wlan_networks")
  res.parse.select { |e| e['wlan_ap'] }
end

def ifup(iface)
  system('ifconfig', iface, 'up')
  $?.success?
end

def die(msg)
  STDERR.puts "ERROR: #{msg}"
  exit 1
end

def parse_args(conf)
  opts = GetoptLong.new(
    ['--help', '-h', GetoptLong::NO_ARGUMENT],
    ['--rundir', GetoptLong::REQUIRED_ARGUMENT],
    ['--vtun-address', GetoptLong::REQUIRED_ARGUMENT],
    ['--vtun-port', GetoptLong::REQUIRED_ARGUMENT],
  )

  opts.each do |opt, arg|
    case opt
    when '--help'
      puts HELP
      exit(0)
    when '--rundir'
      conf[:rundir] = arg
    when '--vtun-address'
      conf[:vtun_address] = arg
    when '--vtun-port'
      die "invalid port number (#{arg})" unless arg =~ /^[1-9][0-9]*$/
      conf[:vtun_port] = arg.to_i
    end
  end

  if ARGV.length != 0 then
    die "invalid number of arguments (#{ARGV.length}), expected 0"
  end

end

parse_args CONF

Signal.trap('EXIT') do
  FileUtils.rm_rf CONF[:rundir]
end

FileUtils.mkdir_p CONF[:rundir]
